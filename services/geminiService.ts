import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { Platform, ContentInput, GeneratedContentWithMetadata, GroundingMetadata } from '../types';
import { GEMINI_TEXT_MODEL } from '../constants';

const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  console.warn("GEMINI_API_KEY environment variable not set. Gemini API calls will fail.");
}
const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY || "MISSING_API_KEY" }); // Fallback to prevent crash if API_KEY is undefined during init

function parseGroundingMetadata(response: GenerateContentResponse): GroundingMetadata | undefined {
  if (response.candidates && response.candidates[0] && response.candidates[0].groundingMetadata) {
    return response.candidates[0].groundingMetadata as GroundingMetadata; // Cast as it might be more specific
  }
  return undefined;
}


export const generateSocialPost = async (
  platform: Platform,
  inputs: ContentInput
): Promise<GeneratedContentWithMetadata> => {
  if (!GEMINI_API_KEY) {
    throw new Error("Gemini API key is not configured.");
  }

  let prompt = `You are an expert social media content creator specializing in crafting engaging posts.
Your task is to generate a ${inputs.postType} for ${platform}.

Platform: ${platform}
Post Type: ${inputs.postType}

User's Main Idea/Topic:
${inputs.mainIdea}
`;

  if (inputs.userWritingSample) {
    prompt += `
User's Authentic Writing Style (for reference, try to capture this voice):
---
${inputs.userWritingSample}
---
`;
  }

  if (inputs.influencerStyles) {
    prompt += `
Influencer Styles to Draw Inspiration From (blend these elements subtly and authentically):
---
${inputs.influencerStyles}
---
`;
  }
  
  let useContextFromUrl = false;
  if (inputs.sourceUrl) {
    prompt += `
Additional Context from this URL (use this information if relevant for the post content): ${inputs.sourceUrl}
`;
    // If a URL is provided, we might want to enable grounding if appropriate
    // For now, we'll just include it in the prompt. If it's a recent news/event type query, grounding would be good.
    // For demonstration, let's assume if a source URL is provided, we might want to use Google Search.
    // This is a simplification; actual grounding needs careful prompt design.
    if (inputs.sourceUrl.startsWith('http')) {
        useContextFromUrl = true;
    }
  }

  prompt += `
Instructions:
- Craft the post content.
- Ensure the tone is authentic, blending the user's voice (if provided) with inspiration from the influencer styles.
- Adhere to platform best practices. For X, be concise; for Threads, structure them clearly (e.g., 1/n, 2/n). For LinkedIn, be professional yet engaging. For Instagram, create compelling captions, suggest relevant emojis, and popular/niche hashtags.
- If generating a thread for X, clearly separate each tweet (e.g., using "--- TWEET BREAK ---" or numbering).
- If the post type is for an image or video (e.g., Instagram Post, LinkedIn Image Post), focus on generating an engaging caption or script.
`;

  if (platform === Platform.Instagram) {
    prompt += "- For Instagram, include 3-5 relevant hashtags.\n";
  }
  if (platform === Platform.X && inputs.postType === 'Thread') {
     prompt += "- For X Threads, make sure each part is clearly distinct and numbered if possible (e.g., 1/3, 2/3, 3/3).\n";
  }


  try {
    const requestPayload = {
        model: GEMINI_TEXT_MODEL,
        contents: prompt,
        config: useContextFromUrl ? { tools: [{googleSearch: {}}] } : {}
    };
    
    console.log("Sending to Gemini:", JSON.stringify(requestPayload, null, 2));

    const response: GenerateContentResponse = await ai.models.generateContent(requestPayload);
    
    const text = response.text;
    if (!text) {
      throw new Error('No content generated by Gemini API.');
    }

    const groundingMetadata = parseGroundingMetadata(response);

    return {
      platform,
      postType: inputs.postType!,
      content: text.trim(),
      groundingMetadata,
    };

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to generate content: ${error.message}`);
    }
    throw new Error("Failed to generate content due to an unknown error.");
  }
};
